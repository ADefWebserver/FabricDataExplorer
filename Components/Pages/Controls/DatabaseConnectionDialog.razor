@using FabricDataExplorer
@using System.Text
@using Microsoft.Data.SqlClient

<div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="inlineDialogLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inlineDialogLabel">Database Connection</h5>
                <button type="button" class="close" aria-label="Close" @onclick="() => Close.InvokeAsync()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="form-group" cellpadding="4" cellspacing="4">
                    <tbody>
                        <tr>
                            <td>
                                <label for="ServerName" class="control-label" style="font-weight: bold">Server: </label>
                            </td>
                            <td>
                                <input type="text" id="ServerName" class="form-control" @bind="ServerName" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label for="DatabaseName" class="control-label" style="font-weight: bold">Database: </label>
                            </td>
                            <td>
                                <input type="text" id="DatabaseName" class="form-control" @bind="DatabaseName" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label for="IntegratedSecurity" class="control-label" style="font-weight: bold">Integrated Security: </label>
                            </td>
                            <td>
                                <select @bind="IntegratedSecurityDisplay" @bind:event="onchange" class="form-control" style="width: 300px;">
                                    @foreach (var option in OptionsTrueFalse)
                                    {
                                        <option value="@option">@option</option>
                                    }
                                </select>
                            </td>
                        </tr>
                        @if (IntegratedSecurityDisplay == "False")
                        {
                            <tr>
                                <td>
                                    <label for="DatabaseUsername" class="control-label" style="font-weight: bold">Database Username: </label>
                                </td>
                                <td>
                                    <input type="text" id="DatabaseUsername" class="form-control" @bind="DatabaseUsername" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label for="DatabasePassword" class="control-label" style="font-weight: bold">Database Password: </label>
                                </td>
                                <td>
                                    <input type="password" id="DatabasePassword" class="form-control" @bind="DatabasePassword" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <table class="form-group" cellpadding="4" cellspacing="4">
                    <tbody>
                        <tr>
                            <td>
                                @if (!boolProcessing)
                                {
                                    <button type="button" class="btn btn-success" @onclick="() => SetConnection()">
                                        Set Database Connection
                                    </button>
                                }
                                else
                                {
                                    <div class="progress" style="margin-bottom: 20px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%;"></div>
                                    </div>
                                    <span>Processing...</span>
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h4>@strStatusMessage</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => Close.InvokeAsync()">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    #nullable disable
    [Parameter] public string ServerName { get; set; }
    [Parameter] public string DatabaseName { get; set; }
    [Parameter] public string ConnectionType { get; set; }
    [Parameter] public string IntegratedSecurityDisplay { get; set; } = "True";
    [Parameter] public string DatabaseUsername { get; set; } = "";
    [Parameter] public string DatabasePassword { get; set; } = "";

    [Parameter] public EventCallback<string> OnSetConnection { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    private bool boolProcessing { get; set; } = false;
    private string strStatusMessage { get; set; } = "";
    private string DatabaseConnectionString { get; set; } = "";

    private List<string> OptionsTrueFalse = new List<string> { "True", "False" };

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private void UpdateDialog(ChangeEventArgs e)
    {
        IntegratedSecurityDisplay = e.Value.ToString();
    }

    // Utility

    #region private async Task SetConnection()
    private async Task SetConnection()
    {
        boolProcessing = true;
        strStatusMessage = "";

        ConnectionSetting connectionSetting = new ConnectionSetting();

        connectionSetting.DatabaseName = DatabaseName;
        connectionSetting.IntegratedSecurity = Convert.ToBoolean(IntegratedSecurityDisplay);
        connectionSetting.Password = DatabasePassword;
        connectionSetting.ServerName = ServerName;
        connectionSetting.Username = DatabaseUsername;

        DTOStatus result = SetConnectionSetting(connectionSetting);

        if (result.Success)
        {
            await OnSetConnection.InvokeAsync(result.ConnectionString);
        }
        else
        {
            strStatusMessage = result.StatusMessage;
        }

        boolProcessing = false;
        StateHasChanged();
    }
    #endregion

    #region public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    {
        // The return message
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;

        // Create a Database connection string
        string strConnectionString = "";

        if (ConnectionType == "SQL")
        {
            strConnectionString = SQLCreateDatabaseConnectionString(objConnectionSetting);
        }
        else if (ConnectionType == "Fabric")
        {
            strConnectionString = FabricCreateDatabaseConnectionString(objConnectionSetting);
        }

        // Test the database connection string
        if (DatabaseConnectionValid(strConnectionString))
        {
            try
            {
                objDTOStatus.Success = true;
                objDTOStatus.ConnectionString = strConnectionString;
            }
            catch (Exception ex)
            {
                // appsettings.json file update error
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }
        else
        {
            // Bad connection setting
            objDTOStatus.Success = false;
            objDTOStatus.StatusMessage = "Connection settings are not valid";
        }

        // Return the result
        return objDTOStatus;
    }
    #endregion

    #region private string SQLCreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    private string SQLCreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3};TrustServerCertificate=True",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private string FabricCreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    private string FabricCreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("Authentication=Active Directory Service Principal;uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3};TrustServerCertificate=True",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private bool DatabaseConnectionValid(string strConnectionString)
    private bool DatabaseConnectionValid(string strConnectionString)
    {
        bool boolDatabaseConnectionValid = false;

        // Try to connect to the database

        try
        {
            using (SqlConnection connection = new SqlConnection(strConnectionString))
            {
                connection.Open();
                boolDatabaseConnectionValid = true;
                DatabaseConnectionString = strConnectionString;
            }
        }
        catch
        {
            boolDatabaseConnectionValid = false;
        }

        return boolDatabaseConnectionValid;
    }
    #endregion
}