@using Azure.Storage.Blobs
@using System.Text
@using Azure.Storage.Blobs.Models

<div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="inlineDialogLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inlineDialogLabel">Azure Storage Connection</h5>
                <button type="button" class="close" aria-label="Close" @onclick="() => Close.InvokeAsync()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="form-group" cellpadding="4" cellspacing="4">
                    <tbody>
                        <tr>
                            <td>
                                <label for="StorageAccountName" class="control-label" style="font-weight: bold">Storage Account: </label>
                            </td>
                            <td>
                                <input type="text" id="StorageAccountName" class="form-control" @bind="StorageAccountName" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label for="ContainerName" class="control-label" style="font-weight: bold">Container: </label>
                            </td>
                            <td>
                                <input type="text" id="ContainerName" class="form-control" @bind="ContainerName" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label for="AccountKey" class="control-label" style="font-weight: bold">Account Key: </label>
                            </td>
                            <td>
                                <input type="password" id="AccountKey" class="form-control" @bind="AccountKey" />
                            </td>
                        </tr>
                    </tbody>
                </table>
                <table class="form-group" cellpadding="4" cellspacing="4">
                    <tbody>
                        <tr>
                            <td>
                                @if (!boolProcessing)
                                {
                                    <button type="button" class="btn btn-success" @onclick="() => SetConnection()">
                                        Set Storage Connection
                                    </button>
                                }
                                else
                                {
                                    <div class="progress" style="margin-bottom: 20px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%;"></div>
                                    </div>
                                    <span>Processing...</span>
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h4>@strStatusMessage</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => Close.InvokeAsync()">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
#nullable disable
    [Parameter] public string StorageAccountName { get; set; }
    [Parameter] public string ContainerName { get; set; }
    [Parameter] public string AccountKey { get; set; } = "";

    [Parameter] public EventCallback<string> OnSetConnection { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    private bool boolProcessing { get; set; } = false;
    private string strStatusMessage { get; set; } = "";
    private string StorageConnectionString { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async Task SetConnection()
    {
        boolProcessing = true;
        strStatusMessage = "";

        try
        {
            string storageConnectionString = $"DefaultEndpointsProtocol=https;AccountName={StorageAccountName};AccountKey={AccountKey};EndpointSuffix=core.windows.net";
            var blobServiceClient = new BlobServiceClient(storageConnectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(ContainerName);

            // Attempt to retrieve properties to check if connection is valid
            BlobContainerProperties properties = await containerClient.GetPropertiesAsync();

            StorageConnectionString = storageConnectionString;
            strStatusMessage = "Connection successful!";
            await OnSetConnection.InvokeAsync(StorageConnectionString);
        }
        catch (Exception ex)
        {
            strStatusMessage = $"Connection failed: {ex.Message}";
        }

        boolProcessing = false;
        StateHasChanged();
    }
}
