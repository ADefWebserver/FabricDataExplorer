@page "/datasheet"
@using FabricDataExplorer.Components.Pages.Controls
@using Microsoft.Data.SqlClient
@using System.Data
@inject ConnectionSettingsService ConnectionSettings

<PageTitle>Datasheet</PageTitle>

@if (ShowConnectionDialog)
{
    <DatabaseConnectionDialog ConnectionType="@ConnectionType"
                              DatabaseName="@DatabaseName"
                              DatabasePassword="@DatabasePassword"
                              DatabaseUsername="@DatabaseUsername"
                              IntegratedSecurityDisplay="@IntegratedSecurityDisplay"
                              ServerName="@ServerName"
                              Close="CloseShowConnectionDialog"
                              OnSetConnection="SetConnectionString" />
}

@if (ShowAzureConnectionDialog)
{
    <AzureStorageConnectionDialog StorageAccountName="@StorageAccountName"
                                  ContainerName="@ContainerName"
                                  AccountKey="@AccountKey"
                                  Close="CloseAzureConnectionDialog"
                                  OnSetConnection="SetConnectionString" />
}

@if (isLoading)
{
    <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
        <span>Processing...</span>
    </div>
}
else
{
    <div>
        <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
            <button @onclick="OpenShowConnectionDialogFabric" title="Settings" style="background:none;border:none;margin-top: 5px;">
                <i class="material-icons" style="color:black;">settings</i>
            </button>
            <b>Fabric Connection: </b>
            <span style="color:@(FabricConnectionStringStatusMessage == "Set" ? "green" : "red")">
                @FabricConnectionStringStatusMessage
            </span>
        </div>
        <br />
        <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
            <button @onclick="OpenShowConnectionDialogAzureStorage" title="Settings" style="background:none;border:none;margin-top: 5px;">
                <i class="material-icons" style="color:black;">settings</i>
            </button>
            <b>Azure Storage Connection: </b>
            <span style="color:@(AzureStorageConnectionStringStatusMessage == "Set" ? "green" : "red")">
                @AzureStorageConnectionStringStatusMessage
            </span>
        </div>
    </div>
    @if (isReadyForImport)
    {
        <br />
        <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
            <b>Table: </b>
            <select @onchange="OnSelectedTableChanged" style="width: 300px; border-block:hidden">
                @foreach (var tableName in tableNames)
                {
                    <option value="@tableName">@tableName</option>
                }
            </select>
        </div>
        <br />
        <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
            <button class="btn btn-success" @onclick="() => SaveData()">Save Data</button>
        </div>
        <br />
        @if (Message != "")
        {
            <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
                <b>Result: </b>
                <span>@Message</span>
            </div>
        }
    }
}
@code {
    string FabricConnectionString = "";
    string AzureStorageConnectionString = "";

    string FabricConnectionStringStatusMessage = "Not Set";
    string AzureStorageConnectionStringStatusMessage = "Not Set";

    private bool ShowConnectionDialog { get; set; } = false;
    private bool ShowAzureConnectionDialog { get; set; } = false;
    private bool showStatusDialog { get; set; } = false;

    bool isLoading { get; set; } = false;
    bool isReadyForImport { get; set; } = false;
    bool ShowStatusDialog { get; set; } = false;

    List<string> tableNames = new List<string> { };
    string selectedTable { get; set; } = "";
    string Message { get; set; } = "";

    private string ConnectionType = "";
    private string DatabaseName = "";
    private string DatabasePassword = "";
    private string DatabaseUsername = "";
    private string IntegratedSecurityDisplay = "";
    private string ServerName = "";

    private string StorageAccountName = "";
    private string ContainerName = "";
    private string AccountKey = "";

    // ********************************************************************************************************************
    // Database Connection
    // ********************************************************************************************************************

    #region private void OpenShowConnectionDialogFabric()
    private void OpenShowConnectionDialogFabric()
    {
        var fabricSettings = ConnectionSettings.Fabric;

        ConnectionType = "Fabric";
        DatabaseName = fabricSettings.DatabaseName;
        DatabasePassword = fabricSettings.DatabasePassword;
        DatabaseUsername = fabricSettings.DatabaseUsername;
        IntegratedSecurityDisplay = fabricSettings.IntegratedSecurityDisplay;
        ServerName = fabricSettings.ServerName;

        ShowConnectionDialog = true;
    }
    #endregion

    #region private void OpenShowConnectionDialogAzureStorage()
    private void OpenShowConnectionDialogAzureStorage()
    {
        var azureStorageSettings = ConnectionSettings.AzureStorage;

        ConnectionType = "AzureStorage";
        StorageAccountName = azureStorageSettings.StorageAccountName;
        ContainerName = azureStorageSettings.ContainerName;
        AccountKey = azureStorageSettings.AccountKey;

        ShowAzureConnectionDialog = true;
    }
    #endregion

    #region private void CloseShowConnectionDialog()
    private void CloseShowConnectionDialog()
    {
        ShowConnectionDialog = false;
    }
    #endregion

    #region private void CloseAzureConnectionDialog()
    private void CloseAzureConnectionDialog()
    {
        ShowAzureConnectionDialog = false;
    }
    #endregion

    #region private void SetConnectionString(string strConnectionString)
    private void SetConnectionString(string strConnectionString)
    {
        // Set the connection string to the global variable

        if (ConnectionType == "Fabric")
        {
            FabricConnectionString = strConnectionString;

            if (FabricConnectionString != "")
            {
                FabricConnectionStringStatusMessage = "Set";
            }
        }

        if (ConnectionType == "AzureStorage")
        {
            AzureStorageConnectionString = strConnectionString;

            if (AzureStorageConnectionString != "")
            {
                AzureStorageConnectionStringStatusMessage = "Set";
            }
        }

        ShowConnectionDialog = false;
        ShowAzureConnectionDialog = false;

        if ((FabricConnectionString != "") && (AzureStorageConnectionString != ""))
        {
            isReadyForImport = true;
            GetTablesInDatabase();
        }
    }
    #endregion

    #region private void OnSelectedTableChanged(ChangeEventArgs e)
    private void OnSelectedTableChanged(ChangeEventArgs e)
    {
        selectedTable = e.Value.ToString();
    }
    #endregion

    // ********************************************************************************************************************
    // Load Data
    // ********************************************************************************************************************

    #region private void GetTablesInDatabase()
    private void GetTablesInDatabase()
    {
        tableNames = new List<string>();

        // Use the FabricConnectionString to get the tables in the database
        using (SqlConnection connection = new SqlConnection(FabricConnectionString))
        {
            connection.Open();

            // Get the tables in the database
            DataTable dt = connection.GetSchema("Tables");

            // Get the table names
            foreach (DataRow row in dt.Rows)
            {
                // Ensure that the table is not a system table
                if (row[3].ToString() == "BASE TABLE")
                {
                    string tablename = $"[{(string)row[1]}].[{(string)row[2]}]";
                    tableNames.Add(tablename);
                }
            }

            connection.Close();

            // order the table names
            tableNames.Sort();

            // Set the value to the first table
            if (tableNames.Count > 0)
            {
                selectedTable = tableNames[0];
            }
        }
    }
    #endregion

    // ********************************************************************************************************************
    // Save Data
    // ********************************************************************************************************************

    #region private void SaveData()
    private void SaveData()
    {
        isLoading = true;

        // // Use the FabricConnectionString to get the tables in the database
        // using (SqlConnection connection = new SqlConnection(FabricConnectionString))
        // {
        //     connection.Open();

        //     // Get the data from the selected table
        //     string sql = $"SELECT * FROM {selectedTable}";
        //     SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);
        //     DataTable dt = new DataTable();
        //     adapter.Fill(dt);

        //     // Save the data to the Azure Storage
        //     using (AzureStorage azureStorage = new AzureStorage(AzureStorageConnectionString))
        //     {
        //         azureStorage.SaveData(dt, selectedTable);
        //     }

        //     connection.Close();
        // }

        isLoading = false;
        Message = "Data saved successfully";
    }
    #endregion
}